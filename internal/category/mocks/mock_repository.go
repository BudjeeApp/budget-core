// Code generated by MockGen. DO NOT EDIT.
// Source: internal/category/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "github.com/jee-lee/budget-core/internal/category/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockRepository) CreateCategory(ctx context.Context, request *repository.CategoryCreateRequest) (*repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, request)
	ret0, _ := ret[0].(*repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockRepositoryMockRecorder) CreateCategory(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockRepository)(nil).CreateCategory), ctx, request)
}

// CreateCycleTypes mocks base method.
func (m *MockRepository) CreateCycleTypes(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCycleTypes", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCycleTypes indicates an expected call of CreateCycleTypes.
func (mr *MockRepositoryMockRecorder) CreateCycleTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCycleTypes", reflect.TypeOf((*MockRepository)(nil).CreateCycleTypes), ctx)
}

// GetCategory mocks base method.
func (m *MockRepository) GetCategory(ctx context.Context, id *uuid.UUID) (*repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(*repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockRepositoryMockRecorder) GetCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockRepository)(nil).GetCategory), ctx, id)
}

// GetCycleTypeByID mocks base method.
func (m *MockRepository) GetCycleTypeByID(ctx context.Context, id int) (*repository.CycleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCycleTypeByID", ctx, id)
	ret0, _ := ret[0].(*repository.CycleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCycleTypeByID indicates an expected call of GetCycleTypeByID.
func (mr *MockRepositoryMockRecorder) GetCycleTypeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCycleTypeByID", reflect.TypeOf((*MockRepository)(nil).GetCycleTypeByID), ctx, id)
}

// GetCycleTypeByName mocks base method.
func (m *MockRepository) GetCycleTypeByName(ctx context.Context, name string) (*repository.CycleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCycleTypeByName", ctx, name)
	ret0, _ := ret[0].(*repository.CycleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCycleTypeByName indicates an expected call of GetCycleTypeByName.
func (mr *MockRepositoryMockRecorder) GetCycleTypeByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCycleTypeByName", reflect.TypeOf((*MockRepository)(nil).GetCycleTypeByName), ctx, name)
}

// GetDefaultCycleType mocks base method.
func (m *MockRepository) GetDefaultCycleType(ctx context.Context) (*repository.CycleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCycleType", ctx)
	ret0, _ := ret[0].(*repository.CycleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCycleType indicates an expected call of GetDefaultCycleType.
func (mr *MockRepositoryMockRecorder) GetDefaultCycleType(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCycleType", reflect.TypeOf((*MockRepository)(nil).GetDefaultCycleType), ctx)
}
